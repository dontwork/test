{"code":"\"use strict\";\r\n// -- Utility code\r\nvar nestUpdate = function (update, prop) {\r\n    return function (func) {\r\n        update(function (model) {\r\n            model[prop] = func(model[prop]);\r\n            return model;\r\n        });\r\n    };\r\n};\r\nvar nest = function (create, update, prop) {\r\n    var component = create(nestUpdate(update, prop));\r\n    var result = Object.assign({}, component);\r\n    if (component.model) {\r\n        result.model = function () {\r\n            var initialModel = {};\r\n            initialModel[prop] = component.model();\r\n            return initialModel;\r\n        };\r\n    }\r\n    if (component.view) {\r\n        result.view = function (model) {\r\n            return component.view(model[prop]);\r\n        };\r\n    }\r\n    return result;\r\n};\r\n// -- Application code\r\nvar convert = function (value, to) {\r\n    if (to === \"C\") {\r\n        return Math.round((value - 32) / 9 * 5);\r\n    }\r\n    else {\r\n        return Math.round(value * 9 / 5 + 32);\r\n    }\r\n};\r\nvar createTemperature = function (label, init) {\r\n    return function (update) {\r\n        var increase = function (amount) {\r\n            return function (_event) {\r\n                update(function (model) {\r\n                    model.value += amount;\r\n                    return model;\r\n                });\r\n            };\r\n        };\r\n        var changeUnits = function (_event) {\r\n            update(function (model) {\r\n                var newUnits = model.units === \"C\" ? \"F\" : \"C\";\r\n                model.value = convert(model.value, newUnits);\r\n                model.units = newUnits;\r\n                return model;\r\n            });\r\n        };\r\n        var model = function () {\r\n            return Object.assign({ value: 22, units: \"C\" }, init);\r\n        };\r\n        var view = function (model) {\r\n            return m(\"div.temperature\", [\r\n                label, \" Temperature: \", model.value, m.trust(\"&deg;\"), model.units,\r\n                m(\"div\", m(\"button\", { onclick: increase(1) }, \"Increase\"), m(\"button\", { onclick: increase(-1) }, \"Decrease\")),\r\n                m(\"div\", m(\"button\", { onclick: changeUnits }, \"Change Units\"))\r\n            ]);\r\n        };\r\n        return { model: model, view: view };\r\n    };\r\n};\r\nvar createTemperaturePair = function (update) {\r\n    var air = nest(createTemperature(\"Air\"), update, \"air\");\r\n    var water = nest(createTemperature(\"Water\", { value: 84, units: \"F\" }), update, \"water\");\r\n    var model = function () {\r\n        return Object.assign(air.model(), water.model());\r\n    };\r\n    var view = function (model) {\r\n        return [\r\n            air.view(model),\r\n            water.view(model)\r\n        ];\r\n    };\r\n    return { model: model, view: view };\r\n};\r\nvar createApp = function (update) {\r\n    return nest(createTemperaturePair, update, \"temperatures\");\r\n};\r\n// -- Meiosis pattern setup code\r\nvar update = m.stream();\r\nvar app = createApp(update);\r\nvar models = m.stream.scan(function (model, func) {\r\n    return func(model);\r\n}, app.model(), update);\r\nvar element = document.getElementById(\"app\");\r\nmodels.map(function (model) {\r\n    m.render(element, app.view(model));\r\n});\r\n"}
